0000000000000000000000000000000
basic:
/---------------------------------\
|          extra            b     |
|            |              |     |
|    vvvvvvvvvvvvvvvvvvv   vvv    |
| 0100000000000000000000000001010 |
| ^^^                   ^^^   ^^^ |
|  |                     |     |  |
| opcode                 a     c  |
\---------------------------------/
load:
/---------------------------------\ /---------------------------------\
|     a                           | |                                 |
|     |                           | |                                 |
|    vvv                          | |                                 |
| 0100010000000000000000000000000 | | 0000000000000000000000000000000 |
| ^^^                             | | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ |
|  |                              | |               |                 |
| opcode                          | |             value               |
\---------------------------------/ \---------------------------------/
print:
/---------------------------------\
|     a                           |
|     |                           |
|    vvv                          |
| 0110111000000000000000000000000 |
| ^^^   ^                         |
|  |    L number flag             |
| opcode                          |
\---------------------------------/
blank  32 bit      == 0000000000000000000000000000000
add r1, r2 into r3 == 0010000000000000000000000001010
load 2 into r1     == 0100000000000000000000000000000 0000000000000000000000000000010
load 2 into r2     == 0100010000000000000000000000010 0000000000000000000000000000010
print r3 as number == 0110111000000000000000000000000

OpCodes:
000 Data Word = 0 (implied)
001 Add       = 1
010 Load      = 2
011 Print     = 3
100 Subtract  = 4
101 
110
111